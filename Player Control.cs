//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/PlayerControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControl: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControl"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""6ca6a440-3d30-4e35-b7cc-2d0bf0d0660e"",
            ""actions"": [
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""c79a5f67-7bf4-4599-bf2c-ff5b5645ac9c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1de743bd-3f6a-4bd6-8f95-8fad1c14cfbf"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Navigation"",
            ""id"": ""16b05b9d-239e-455f-9d64-dbeb2afcd6ca"",
            ""actions"": [
                {
                    ""name"": ""Select UP (Stick)"",
                    ""type"": ""Button"",
                    ""id"": ""a5414ca7-112a-4571-8dd6-d1b46189f23f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select UP (D-Pad)"",
                    ""type"": ""Button"",
                    ""id"": ""944e348c-8d6f-4e11-8dea-4b3de9c7f1ba"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Confirm (Cross)"",
                    ""type"": ""Button"",
                    ""id"": ""eb360562-02c0-4e33-a431-8e4b71fd5f83"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel (Circle)"",
                    ""type"": ""Button"",
                    ""id"": ""4eff84e6-3582-4d90-9220-61b14df26e72"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Start"",
                    ""type"": ""Button"",
                    ""id"": ""349e4c07-b9e4-4394-850f-5248195b0630"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""be93d17c-3e15-4c1d-a041-76158324b7a7"",
                    ""path"": ""<DualSenseGamepadHID>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select UP (Stick)"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d7da551-6cc5-4d65-9a70-2e45f557fa7a"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Confirm (Cross)"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5bcaa016-a995-4abd-90e5-e36ea6ad1a67"",
                    ""path"": ""<DualSenseGamepadHID>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Confirm (Cross)"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d742ce1a-bd3e-4208-b27d-90a94752d2d8"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel (Circle)"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ee87a30a-3aac-471a-9457-7ae227d48d53"",
                    ""path"": ""<DualSenseGamepadHID>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select UP (D-Pad)"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""01251492-dbe4-4efa-9e48-861af5b8c547"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_Attack = m_Gameplay.FindAction("Attack", throwIfNotFound: true);
        // Navigation
        m_Navigation = asset.FindActionMap("Navigation", throwIfNotFound: true);
        m_Navigation_SelectUPStick = m_Navigation.FindAction("Select UP (Stick)", throwIfNotFound: true);
        m_Navigation_SelectUPDPad = m_Navigation.FindAction("Select UP (D-Pad)", throwIfNotFound: true);
        m_Navigation_ConfirmCross = m_Navigation.FindAction("Confirm (Cross)", throwIfNotFound: true);
        m_Navigation_CancelCircle = m_Navigation.FindAction("Cancel (Circle)", throwIfNotFound: true);
        m_Navigation_Start = m_Navigation.FindAction("Start", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_Attack;
    public struct GameplayActions
    {
        private @PlayerControl m_Wrapper;
        public GameplayActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Attack => m_Wrapper.m_Gameplay_Attack;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);

    // Navigation
    private readonly InputActionMap m_Navigation;
    private List<INavigationActions> m_NavigationActionsCallbackInterfaces = new List<INavigationActions>();
    private readonly InputAction m_Navigation_SelectUPStick;
    private readonly InputAction m_Navigation_SelectUPDPad;
    private readonly InputAction m_Navigation_ConfirmCross;
    private readonly InputAction m_Navigation_CancelCircle;
    private readonly InputAction m_Navigation_Start;
    public struct NavigationActions
    {
        private @PlayerControl m_Wrapper;
        public NavigationActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @SelectUPStick => m_Wrapper.m_Navigation_SelectUPStick;
        public InputAction @SelectUPDPad => m_Wrapper.m_Navigation_SelectUPDPad;
        public InputAction @ConfirmCross => m_Wrapper.m_Navigation_ConfirmCross;
        public InputAction @CancelCircle => m_Wrapper.m_Navigation_CancelCircle;
        public InputAction @Start => m_Wrapper.m_Navigation_Start;
        public InputActionMap Get() { return m_Wrapper.m_Navigation; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NavigationActions set) { return set.Get(); }
        public void AddCallbacks(INavigationActions instance)
        {
            if (instance == null || m_Wrapper.m_NavigationActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_NavigationActionsCallbackInterfaces.Add(instance);
            @SelectUPStick.started += instance.OnSelectUPStick;
            @SelectUPStick.performed += instance.OnSelectUPStick;
            @SelectUPStick.canceled += instance.OnSelectUPStick;
            @SelectUPDPad.started += instance.OnSelectUPDPad;
            @SelectUPDPad.performed += instance.OnSelectUPDPad;
            @SelectUPDPad.canceled += instance.OnSelectUPDPad;
            @ConfirmCross.started += instance.OnConfirmCross;
            @ConfirmCross.performed += instance.OnConfirmCross;
            @ConfirmCross.canceled += instance.OnConfirmCross;
            @CancelCircle.started += instance.OnCancelCircle;
            @CancelCircle.performed += instance.OnCancelCircle;
            @CancelCircle.canceled += instance.OnCancelCircle;
            @Start.started += instance.OnStart;
            @Start.performed += instance.OnStart;
            @Start.canceled += instance.OnStart;
        }

        private void UnregisterCallbacks(INavigationActions instance)
        {
            @SelectUPStick.started -= instance.OnSelectUPStick;
            @SelectUPStick.performed -= instance.OnSelectUPStick;
            @SelectUPStick.canceled -= instance.OnSelectUPStick;
            @SelectUPDPad.started -= instance.OnSelectUPDPad;
            @SelectUPDPad.performed -= instance.OnSelectUPDPad;
            @SelectUPDPad.canceled -= instance.OnSelectUPDPad;
            @ConfirmCross.started -= instance.OnConfirmCross;
            @ConfirmCross.performed -= instance.OnConfirmCross;
            @ConfirmCross.canceled -= instance.OnConfirmCross;
            @CancelCircle.started -= instance.OnCancelCircle;
            @CancelCircle.performed -= instance.OnCancelCircle;
            @CancelCircle.canceled -= instance.OnCancelCircle;
            @Start.started -= instance.OnStart;
            @Start.performed -= instance.OnStart;
            @Start.canceled -= instance.OnStart;
        }

        public void RemoveCallbacks(INavigationActions instance)
        {
            if (m_Wrapper.m_NavigationActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(INavigationActions instance)
        {
            foreach (var item in m_Wrapper.m_NavigationActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_NavigationActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public NavigationActions @Navigation => new NavigationActions(this);
    public interface IGameplayActions
    {
        void OnAttack(InputAction.CallbackContext context);
    }
    public interface INavigationActions
    {
        void OnSelectUPStick(InputAction.CallbackContext context);
        void OnSelectUPDPad(InputAction.CallbackContext context);
        void OnConfirmCross(InputAction.CallbackContext context);
        void OnCancelCircle(InputAction.CallbackContext context);
        void OnStart(InputAction.CallbackContext context);
    }
}
